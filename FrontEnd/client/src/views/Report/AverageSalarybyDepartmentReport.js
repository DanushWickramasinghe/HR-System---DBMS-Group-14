import React, { useState, useEffect } from "react";
import Axios from "axios";
import { useGlobalFilter, useRowSelect, useTable } from "react-table";
import Table from "@mui/material/Table";
import TableBody from "@mui/material/TableBody";
import TableCell from "@mui/material/TableCell";
import TableContainer from "@mui/material/TableContainer";
import TableHead from "@mui/material/TableHead";
import TableRow from "@mui/material/TableRow";
import Paper from "@mui/material/Paper";

const COLUMNS = [
  { Header: "Department", accessor: "department" },
  { Header: "Total Employee Number", accessor: "total_employees" },
  { Header: "Average Salary", accessor: "avg_salary" },
];

export function AverageSalarybyDepartmentReport() {
  const [currentUsername, setCurrentUsername] = useState("");
  const [averageSalaryList, setAverageSalaryList] = useState([]);
  const [alertMessage, setAlertMessage] = useState("");
  const [show, setShow] = useState(false);
  const [alertType, setAlertType] = useState("");

  const user_id = sessionStorage.getItem("userId");
  const current = new Date();
  const currentDate = `${current.getDate()}/${
    current.getMonth() + 1
  }/${current.getFullYear()}`;

  useEffect(() => {
    let token = sessionStorage.getItem("token");
    Axios.get("http://localhost:3001/report/getCurrentUserName/" + user_id, {
      headers: { Authorization: `Bearer ${token}` },
    })
      .then((currentUser) => {
        setCurrentUsername(
          currentUser.data.data[0].firstname +
            " " +
            currentUser.data.data[0].lastname
        );
      })
      .catch((err) => {
        setAlertMessage("");
        setAlertType("alert alert-danger");
        switch (err.response.request.status) {
          case 400:
            setAlertMessage(err.response.data.message);
            setShow(true);
            break;
          case 500:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          case 501:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          case 502:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          default:
            break;
        }
      });
  }, [user_id]);

  useEffect(() => {
    let token = sessionStorage.getItem("token");
    Axios.get(
      "http://localhost:3001/report/create_average_salary_of_departments_report",
      { headers: { Authorization: `Bearer ${token}` } }
    )
      .then((response) => {
        setAverageSalaryList(response.data.data);
      })
      .catch((err) => {
        setAlertType("alert alert-danger");
        setAlertMessage("");
        switch (err.response.request.status) {
          case 400:
            setAlertMessage(err.response.data.message);
            setShow(true);
            break;
          case 500:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          case 501:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          case 502:
            setAlertMessage("Server Error!");
            setShow(true);
            break;
          default:
            break;
        }
      });
  }, []);

  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } =
    useTable(
      {
        columns: COLUMNS,
        data: averageSalaryList,
      },
      useRowSelect,
      useGlobalFilter,
      (hooks) => {
        hooks.visibleColumns.push((columns) => {
          return [...columns];
        });
      }
    );

  return (
    <div className="background-Report ">
      <div>
        <h1 class="title">
          Average Salary and Employee Count of Departments Report
        </h1>

        <div
          style={{ visibility: show ? "visible" : "hidden" }}
          className={alertType}
          role="alert"
        >
          {alertMessage}
        </div>

        <div>
          <center>
            <label className="fonts">
              Generated By:
              <lable className="det"> {currentUsername}</lable>
            </label>
            <br></br>
            <label className="fonts">
              Generated Date:
              <lable className="det"> {currentDate}</lable>
            </label>
          </center>
        </div>

        <TableContainer component={Paper} sx={{ mt: 7 }}>
          <Table
            sx={{
              minWidth: 650,
              bgcolor: "#141b2d",
              padding: 100,
            }}
            size="medium"
            aria-label="a dense table"
          >
            {headerGroups.map((headerGroup) => (
              <tr {...headerGroup.getHeaderGroupProps()}>
                {headerGroup.headers.map((column) => (
                  <th {...column.getHeaderProps()} className="center">
                    {column.render("Header")}
                  </th>
                ))}
              </tr>
            ))}
            <TableBody {...getTableBodyProps()}>
              {rows.map((row) => {
                prepareRow(row);
                return (
                  <TableRow {...row.getRowProps()}>
                    {row.cells.map((cell) => {
                      return (
                        <TableCell
                          align="center"
                          sx={{ color: "#fff", p: 3 }}
                          {...cell.getCellProps()}
                        >
                          {cell.render("Cell")}
                        </TableCell>
                      );
                    })}
                  </TableRow>
                );
              })}
            </TableBody>
          </Table>
        </TableContainer>
      </div>
    </div>
  );
}
